<dependencies>
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>secretsmanager</artifactId>
        <version>2.17.35</version>
    </dependency>
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>regions</artifactId>
        <version>2.17.35</version>
    </dependency>
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>auth</artifactId>
        <version>2.17.35</version>
    </dependency>
</dependencies>


import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;
import software.amazon.awssdk.services.secretsmanager.model.SecretsManagerException;

import java.time.Instant;

public class SecretsManagerExample {

    public static void main(String[] args) {
        // Set up AWS credentials
        String accessKeyId = "YOUR_ACCESS_KEY_ID";
        String secretAccessKey = "YOUR_SECRET_ACCESS_KEY";
        Region region = Region.US_EAST_1; // Replace with your desired region

        // Set up Secrets Manager client
        SecretsManagerClient secretsManagerClient = SecretsManagerClient.builder()
                .region(region)
                .build();

        try {
            // Retrieve secret "Secret-YIN"
            String secretYinSecretId = "Secret-YIN";
            GetSecretValueResponse secretYinSecretValueResponse = retrieveSecret(secretsManagerClient, secretYinSecretId);
            String secretYinSecretValue = secretYinSecretValueResponse.secretString();
            Instant secretYinModifiedDate = secretYinSecretValueResponse.createdDate();

            // Retrieve secret "Secret-YANG"
            String secretYangSecretId = "Secret-YANG";
            GetSecretValueResponse secretYangSecretValueResponse = retrieveSecret(secretsManagerClient, secretYangSecretId);
            String secretYangSecretValue = secretYangSecretValueResponse.secretString();
            Instant secretYangModifiedDate = secretYangSecretValueResponse.createdDate();

            // Compare modification dates
            if (secretYinModifiedDate.isAfter(secretYangModifiedDate)) {
                System.out.println("Secret-YIN is the most recent secret");
            } else if (secretYangModifiedDate.isAfter(secretYinModifiedDate)) {
                System.out.println("Secret-YANG is the most recent secret");
            } else {
                System.out.println("Both secrets have the same modification date");
            }

            System.out.println("Secret-YIN secret value: " + secretYinSecretValue);
            System.out.println("Secret-YANG secret value: " + secretYangSecretValue);
        } catch (SecretsManagerException e) {
            System.err.println("Failed to retrieve secrets: " + e.awsErrorDetails().errorMessage());
        } finally {
            // Close the Secrets Manager client
            secretsManagerClient.close();
        }
    }

    private static GetSecretValueResponse retrieveSecret(SecretsManagerClient secretsManagerClient, String secretId) {
        GetSecretValueRequest secretValueRequest = GetSecretValueRequest.builder()
                .secretId(secretId)
                .build();

        return secretsManagerClient.getSecretValue(secretValueRequest);
    }
}
