import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.concurrent.CompletableFuture;

public class HttpClientExample {
    public static void main(String[] args) {
        // Define the service URL, authorization header, and client ID
        String baseUrl = "https://example.com/api/resource/";
        String clientId = "yourClientId";
        String authToken = "Bearer yourAccessToken";

        // Create an HttpClient
        HttpClient httpClient = HttpClient.newHttpClient();

        // Build the URI with the client ID as a path parameter
        String requestUrl = baseUrl + clientId;
        URI uri = URI.create(requestUrl);

        // Build the HTTP request with the Authorization header
        HttpRequest request = HttpRequest.newBuilder()
                .uri(uri)
                .header("Authorization", authToken)
                .GET()
                .build();

        // Send the HTTP request asynchronously and map the response to MyResponseClass
        CompletableFuture<HttpResponse<MyResponseClass>> responseFuture = httpClient.sendAsync(
                request,
                HttpResponse.BodyHandlers.ofMapping(
                        HttpResponse.BodyHandlers.ofString(),
                        MyResponseClass.fromJson() // Replace with your own deserialization logic
                )
        );

        // Handle the response
        responseFuture.thenAccept(response -> {
            int statusCode = response.statusCode();

            if (statusCode == 200) {
                MyResponseClass responseObject = response.body();
                System.out.println("Deserialized Object: " + responseObject);
            } else {
                System.err.println("Request failed with status code: " + statusCode);
            }
        }).join(); // Wait for the response to complete
    }
}
