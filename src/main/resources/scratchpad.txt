import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("Usage: java Main <file>");
            return;
        }

        String file = args[0];
        String basePath = Paths.get(file).getParent().toString();
        String result = doInclude(file, basePath);

        System.out.println(result + "\n\n\n\n# -----------\n# Merged with ramlMerge.php\n# http://www.mikestowe.com\n\n");
    }

    private static String doInclude(String file, String basePath) {
        String contents;
        try {
            contents = new String(Files.readAllBytes(Paths.get(file)));
        } catch (IOException e) {
            contents = null;
        }

        if (contents == null) {
            try {
                contents = new String(Files.readAllBytes(Paths.get(basePath, file)));
            } catch (IOException e) {
                contents = null;
            }
        }

        if (contents == null) {
            return "\n\n# Unable to Include " + file + "\n\n";
        }

        String tabIndex = "";
        String pattern = "(([\\s\\t]*)([a-z0-9_/\\-]+)):[\\s]+!include ([^\\s]+)";
        Pattern regex = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);
        Matcher matcher = regex.matcher(contents);

        StringBuffer sb = new StringBuffer();
        while (matcher.find()) {
            String property = matcher.group(3);
            String spacing = matcher.group(2);
            String includedFile = matcher.group(4);

            if (!includedFile.matches("^((https?://)|/)")) {
                includedFile = Paths.get(basePath, includedFile).toString();
            }

            String subContent = doInclude(includedFile, spacing + "    ");
            String[] subLines = subContent.split("\\r?\\n");

            int i = 0;
            String cap = ": | \n";
            while (i < subLines.length && !subLines[i].matches("[^\\s]")) {
                i++;
            }

            if (subLines[i].contains(":") && subLines[i].matches("(:\\s*('|\\\")(.+)('|\\\"))*")) {
                cap = ":\n";
            }

            matcher.appendReplacement(sb, Matcher.quoteReplacement(spacing + property + cap + subContent));
        }
        matcher.appendTail(sb);

        return sb.toString();
    }
}
