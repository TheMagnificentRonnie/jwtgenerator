import com.github.tomakehurst.wiremock.WireMockServer;
import com.github.tomakehurst.wiremock.client.WireMock;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class WireMockSampleTest {

    private static WireMockServer wireMockServer;

    @BeforeClass
    public static void setup() {
        wireMockServer = new WireMockServer();
        wireMockServer.start();

        WireMock.configureFor("localhost", wireMockServer.port());

        WireMock.stubFor(WireMock.get(WireMock.urlPathMatching("/person/([0-9]+)"))
                .withHeader("Authorization", WireMock.matching("Bearer .*"))
                .willReturn(WireMock.aResponse()
                        .withStatus(200)
                        .withHeader("Content-Type", "application/json")
                        .withBody("{\n" +
                                "  \"person\": {\n" +
                                "    \"id\": ${request.path.[1]},\n" +
                                "    \"name\": \"John Doe\",\n" +
                                "    \"age\": 30,\n" +
                                "    \"address\": {\n" +
                                "      \"street\": \"123 Main Street\",\n" +
                                "      \"city\": \"Anytown\",\n" +
                                "      \"state\": \"CA\",\n" +
                                "      \"zip\": \"12345\"\n" +
                                "    }\n" +
                                "  },\n" +
                                "  \"bankAccounts\": [\n" +
                                "    {\n" +
                                "      \"accountNumber\": \"987654321\",\n" +
                                "      \"bankName\": \"XYZ Bank\",\n" +
                                "      \"balance\": 5000.00,\n" +
                                "      \"currency\": \"USD\"\n" +
                                "    },\n" +
                                "    {\n" +
                                "      \"accountNumber\": \"123456789\",\n" +
                                "      \"bankName\": \"ABC Bank\",\n" +
                                "      \"balance\": 2500.50,\n" +
                                "      \"currency\": \"USD\"\n" +
                                "    }\n" +
                                "  ]\n" +
                                "}")));
    }

    @AfterClass
    public static void tearDown() {
        wireMockServer.stop();
    }

    @Test
    public void testGetPersonWithValidAuthorization() {
        given()
            .header("Authorization", "Bearer validToken")
        .when()
            .get("http://localhost:" + wireMockServer.port() + "/person/123")
        .then()
            .statusCode(200)
            .body("person.id", equalTo(123))
            .body("person.name", equalTo("John Doe"))
            .body("bankAccounts.size()", equalTo(2));
    }

    @Test
    public void testGetPersonWithInvalidAuthorization() {
        given()
            .header("Authorization", "Bearer invalidToken")
        .when()
            .get("http://localhost:" + wireMockServer.port() + "/person/456")
        .then()
            .statusCode(401); // Assuming unauthorized status code is 401
    }
}
